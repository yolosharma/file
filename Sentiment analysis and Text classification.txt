D) SENTIMENT ANALYSIS
!pip install textblob
from textblob import TextBlob
blob_1=TextBlob(text_1)
blob_1.sentiment

E) TEXT CLASSIFICATION
import numpy as np
import pandas as pd
from sklearn.datasets  import fetch_20newsgroups
train=fetch_20newsgroups(subset='train')
test=fetch_20newsgroups(subset='test')
train.keys()
train['target_names']
np.unique(train['target'])
train['data']
print(train['data'][1])

train['data'] # FEATURE SET

train['target']
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
 mnb=make_pipeline(TfidfVectorizer(),MultinomialNB())
mnb.fit(train['data'],train['target'])
pred=mnb.predict(test['data'])
pred
from sklearn.metrics import classification_report,confusion_matrix
report=classification_report(test['target'],pred)
print('The report:\n',report)
cm=confusion_matrix(test['target'],pred)
print('The confusion matrix:\n',cm)

SHOWING TEXT TOPIC
def predict_news_group(doc):
    group_pred=mnb.predict([doc])
    return test['target_names'][group_pred[0]]
predict_news_group(text)
